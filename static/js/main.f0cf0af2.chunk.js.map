{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Sections/Sections.jsx","components/Notification/Notification.jsx","components/App.jsx","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onLeaveFeedback","type","name","onClick","Sections","title","children","Notification","message","App","state","handleIncrement","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","document","getElementById"],"mappings":"gPAqBeA,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,OCYWC,G,MAjBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,oCACE,4BAAQC,KAAK,SAASC,KAAK,OAAOC,QAASH,GAA3C,QAGA,4BAAQC,KAAK,SAASC,KAAK,UAAUC,QAASH,GAA9C,WAGA,4BAAQC,KAAK,SAASC,KAAK,MAAMC,QAASH,GAA1C,UCEWI,EAXE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACf,oCACE,4BAAKD,GACJC,ICOUC,EAVM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,oCACE,2BAAIA,KCCaC,E,4MACnBC,MAAQ,CACNhB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPe,gBAAkB,YAA2B,IAAdT,EAAa,EAAvBU,OAAUV,KAC7B,EAAKW,UAAS,SAAAC,GAAS,sBAAQZ,EAAOY,EAAUZ,GAAQ,O,EAG1Da,mBAAqB,kBACnB,EAAKL,MAAMhB,KAAO,EAAKgB,MAAMf,QAAU,EAAKe,MAAMd,K,EAEpDoB,gCAAkC,kBAChC,EAAKD,qBAAuB,EACxBE,KAAKC,MAAO,EAAKR,MAAMhB,KAAO,EAAKqB,qBAAwB,KAC3D,G,uDAGJ,OACE,oCACE,kBAAC,EAAD,CAAUV,MAAM,yBACd,kBAAC,EAAD,CAAiBL,gBAAiBmB,KAAKR,mBAExCQ,KAAKJ,qBAAuB,EAC3B,kBAAC,EAAD,CAAUV,MAAM,cACd,kBAAC,EAAD,CACEX,KAAMyB,KAAKT,MAAMhB,KACjBC,QAASwB,KAAKT,MAAMf,QACpBC,IAAKuB,KAAKT,MAAMd,IAChBC,MAAOsB,KAAKJ,qBACZjB,mBAAoBqB,KAAKH,qCAI7B,kBAAC,EAAD,CAAcR,QAAQ,2B,GApCCY,aCFjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f0cf0af2.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    <p>Good: {good}</p>\r\n    <p>Neutral: {neutral}</p>\r\n    <p>Bad: {bad}</p>\r\n    <p>Total: {total}</p>\r\n    <p>Positive feedback: {positivePercentage}%</p>\r\n  </>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../styled/buttons.module.css';\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\r\n  <>\r\n    <button type=\"button\" name=\"good\" onClick={onLeaveFeedback}>\r\n      Good\r\n    </button>\r\n    <button type=\"button\" name=\"neutral\" onClick={onLeaveFeedback}>\r\n      Neutral\r\n    </button>\r\n    <button type=\"button\" name=\"bad\" onClick={onLeaveFeedback}>\r\n      Bad\r\n    </button>\r\n  </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Sections = ({ title, children }) => (\r\n  <>\r\n    <h3>{title}</h3>\r\n    {children}\r\n  </>\r\n);\r\n\r\nSections.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.object.isRequired,\r\n};\r\nexport default Sections;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n  <>\r\n    <p>{message}</p>\r\n  </>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\nimport Statistics from './Statistics/Statistics';\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\nimport Sections from './Sections/Sections';\r\nimport Notification from './Notification/Notification';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleIncrement = ({ target: { name } }) => {\r\n    this.setState(prevState => ({ [name]: prevState[name] + 1 }));\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.neutral + this.state.bad;\r\n\r\n  countPositiveFeedbackPercentage = () =>\r\n    this.countTotalFeedback() > 0\r\n      ? Math.round((this.state.good / this.countTotalFeedback()) * 100)\r\n      : 0;\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Sections title=\"Please leave feedback\">\r\n          <FeedbackOptions onLeaveFeedback={this.handleIncrement} />\r\n        </Sections>\r\n        {this.countTotalFeedback() > 0 ? (\r\n          <Sections title=\"Statistics\">\r\n            <Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            ></Statistics>\r\n          </Sections>\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}